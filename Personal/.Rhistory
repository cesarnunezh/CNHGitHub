sample_means[[1]] <- mean(rnorm(n[[i]]))
}
sample_means
for (i in seq_along(n)) {
sample_means[[i]] <- mean(rnorm(n[[i]]))
}
sample_means
for (year in seq_along(birth_years)) {
print(year)
}
birth_years <- c(1956, 1958, 1989, 1991, 1995, 1996, 2021)
for (year in seq_along(birth_years)) {
print(year)
}
for (year in birth_years) {
print(year)
}
for (year in seq_along(birth_years)) {
actualAge <- 2024 - year[[i]]
print(paste0("The age of family member ", i, "is:", actualAge, "\n"))
}
for (year in seq_along(birth_years)) {
actualAge <- 2024 - birth_years[[i]]
print(paste0("The age of family member ", i, "is:", actualAge, "\n"))
}
birth_years <- c(1956, 1958, 1989, 1991, 1995, 1996, 2021)
# Write a loop that calculates the age of each member of you family.
for (year in seq_along(birth_years)) {
actualAge <- 2024 - birth_years[[i]]
print(paste0("The age of family member ", i, "is:", actualAge, "\n"))
}
print(paste0("The age of family member ", i, "is:", actualAge, fill = TRUE))
print(paste0("The age of family member ", i, "is:", actualAge))
for (year in seq_along(birth_years)) {
actualAge <- 2024 - birth_years[[i]]
print(paste0("The age of family member ", i, "is:", actualAge))
}
for (year in seq_along(birth_years)) {
actualAge <- 2024 - birth_years[[i]]
print(actualAge)
}
for (year in seq_along(birth_years)) {
print(year)
print(birth_years[[year]])
}
for (year in seq_along(birth_years)) {
actualAge <- 2024 - birth_years[[year]]
print(paste0("The age of family member ", year, "is:", actualAge))
}
for (year in seq_along(birth_years)) {
actualAge <- 2024 - birth_years[[year]]
print(paste0("The age of family member ", year, " is: ", actualAge))
}
ages <- 2024 - birth_years
paste0("The age of family member is: ", ages)
paste0("The age of family member", seq_along(ages),"is: ", ages)
paste0("The age of family member ", seq_along(ages)," is: ", ages)
paste0("The age of family member ", seq_along(ages)," is: ", ages, "\n")
paste0("The age of family member ", seq_along(ages)," is: ", ages, "/n")
paste0("The age of family member ", seq_along(ages)," is: ", ages)
items_to_iterate_over <- c(-10:10)
results <- rep(0, length(items_to_iterate_over))
for (i in seq_along(items_to_iterate_over)) {
# we capture the median of three random numbers from normal distributions
# with various means (from -10 to 10)
results[[i]] <- median(rnorm(n = 3, mean = items_to_iterate_over[[i]]))
}
# replace the ... with the relevant code
for (i in seq_along(x) ){
print(x[[i]])
}
x <- c(5, 10, 15, 20, 25000)
# replace the ... with the relevant code
for (i in seq_along(x) ){
print(x[[i]])
}
# 2. Write a for-loop that prints the numbers 5, 10, 15, 20, 25000 by iterating over the vector directly.
paste0("Number of ", seq_along(x),"th item is: ", x)
# 2. Write a for-loop that prints the numbers 5, 10, 15, 20, 25000 by iterating over the vector directly.
paste0(x)
# 2. Write a for-loop that prints the numbers 5, 10, 15, 20, 25000 by iterating over the vector directly.
for (i x ){
# 2. Write a for-loop that prints the numbers 5, 10, 15, 20, 25000 by iterating over the vector directly.
for (i in x){
print(x)
}
# 2. Write a for-loop that prints the numbers 5, 10, 15, 20, 25000 by iterating over the vector directly.
for (i in x){
print(i)
}
sd(rnorm(5))
sd(rnorm(10))
sd(rnorm(15))
sd(rnorm(20))
sd(rnorm(25000))
for (i in seq_along(x)){
print(sd(rnorm(x[[i]])))
}
# a. adjust your for-loop to see how the sd changes when you use rnorm(n, mean = 4)
for (i in seq_along(x)){
print(sd(rnorm(x[[i]], mean = 4)))
}
# b. adjust your for-loop to see how the sd changes when you use rnorm(n, sd = 4)
for (i in seq_along(x)){
print(sd(rnorm(x[[i]], sd = 4)))
}
results <- rep(0, length(x))
for (i in seq_along(x)){
results[[i]] <- sd(rnorm(x[[i]], sd = 4))
}
results
radii <- c(0:10)
area <- double(length(radii))
for (i in seq_along(radii)) {
area[[i]] <- pi * radii[[i]] ˆ 2
for (i in seq_along(radii)) {
area[[i]] <- pi * radii[[i]] ˆ 2
for (i in seq_along(radii)) {
area[[i]] <- pi * radii[[i]] ^ 2
}
area
pi * radii ^ 2
radii <- c(-1:10)
area <- double(length(radii))
for (i in seq_along(radii)) {
if (radii[[i]] < 0) {
area[[i]] <- NaN
} else {
area[[i]] <- pi * radii[[i]] ˆ 2
radii <- c(-1:10)
area <- double(length(radii))
for (i in seq_along(radii)) {
if (radii[[i]] < 0) {
area[[i]] <- NaN
} else {
area[[i]] <- pi * radii[[i]] ^ 2
}
}
area
area <- pi * radii ^ 2
area
if_else(radii < 0, NaN, pi * radii ^ 2)
area <- if_else(radii < 0, NaN, pi * radii ^ 2)
set.seed(5)
visitors <- rpois(20, lambda = 1)
total_visitors <- 0
for (v in visitors) {
total_visitors <- total_visitors + v
}
total_visitors
rpois(20, lambda = 1)
rpois(20, lambda = 1)
rpois(20, lambda = 1)
rpois(20, lambda = 1)
rpois(20, lambda = 1)
set.seed(5)
visitors <- rpois(20, lambda = 1)
sum(visitors)
big <- c()
# slow loop
tictoc::tic()
for (x in 2:50000) {
big <- c(big, x * 10)
}
tictoc::toc()
big
tictoc::tic()
big <- 2:50000 x 10
tictoc::tic()
big <- 2:50000 * 10
tictoc::toc()
big
big <- rep(0, length(2:50000))
# slow loop
tictoc::tic()
for (x in seq_along(2:50000)) {
big[[x]] <- 2:50000[[x]] * 10
}
# 4. b. The loop is slow because we didn’t pre-allocate space. Re-write the loop with preallocated integer
# vector.
w <- 2:50000
w <- 2:50000
big <- rep(0, length(w))
# slow loop
tictoc::tic()
for (x in seq_along(w)) {
big[[x]] <- w[[x]] * 10
}
tictoc::toc()
# III. Simulating the Law of Large Numbers ----
estimates <- tibble(n = integer(), sample_mean = double())
# 1. Create a vector called sample_sizes that is made up of the numbers 1 through 50.
sample_sizes <- 1:50
sample_sizes <- 1:50
estimates <- tibble(n = integer(), sample_mean = double())
# 2. Write a loop over the sample_sizes you specified above. In the loop, for each sample size you will:
#   a. Calculate the mean of a sample from the random normal distribution with mean = 0 and sd = 5.
#   b. Make an intermediate tibble to store the results
#   c. Append the intermediate tibble to your tibble using bind_rows().
set.seed(60637)
for (x in sample_sizes) {
# Calculate the mean of a random sample from normal distribution with mean = 0 and sd = 5
mean_calc <- mean(rnorm(n = x, mean = 0, sd = 5))
# Make a tibble with your estimates
this_estimate <- tibble(n = x, sample_mean = mean_calc)
# Append the new rows to your tibble
# If not sure how bind_rows works, use ?bind_rows
estimates <- bind_rows(estimates, this_estimate)
}
View(estimates)
estimates |>
ggplot(aes(x = n, y = sample_mean)) +
geom_line()
?seq
sample_sizes <- seq(100, 5000, by = 100)
sample_sizes <- seq(100, 5000, by = 100)
for (x in sample_sizes) {
# Calculate the mean of a random sample from normal distribution with mean = 0 and sd = 5
mean_calc <- mean(rnorm(n = x, mean = 0, sd = 5))
# Make a tibble with your estimates
this_estimate <- tibble(n = x, sample_mean = mean_calc)
# Append the new rows to your tibble
# If not sure how bind_rows works, use ?bind_rows
estimates <- bind_rows(estimates, this_estimate)
}
estimates |>
ggplot(aes(x = n, y = sample_mean)) +
geom_line()
sample_sizes <- seq(100, 1000, by = 100)
for (x in sample_sizes) {
# Calculate the mean of a random sample from normal distribution with mean = 0 and sd = 5
mean_calc <- mean(rnorm(n = x, mean = 0, sd = 5))
# Make a tibble with your estimates
this_estimate <- tibble(n = x, sample_mean = mean_calc)
# Append the new rows to your tibble
# If not sure how bind_rows works, use ?bind_rows
estimates <- bind_rows(estimates, this_estimate)
}
estimates |>
ggplot(aes(x = n, y = sample_mean)) +
geom_line()
sample_sizes <- seq(100, 1000, by = 100)
for (x in sample_sizes) {
# Calculate the mean of a random sample from normal distribution with mean = 0 and sd = 5
mean_calc <- mean(rnorm(n = x, mean = 0, sd = 5))
# Make a tibble with your estimates
this_estimate <- tibble(n = x, sample_mean = mean_calc)
# Append the new rows to your tibble
# If not sure how bind_rows works, use ?bind_rows
estimates <- bind_rows(estimates, this_estimate)
}
estimates |>
ggplot(aes(x = n, y = sample_mean)) +
geom_line()
sample_sizes <- seq(100, 1000, by = 100)
View(estimates)
estimates <- tibble(n = integer(), sample_mean = double())
sample_sizes <- seq(100, 1000, by = 100)
for (x in sample_sizes) {
# Calculate the mean of a random sample from normal distribution with mean = 0 and sd = 5
mean_calc <- mean(rnorm(n = x, mean = 0, sd = 5))
# Make a tibble with your estimates
this_estimate <- tibble(n = x, sample_mean = mean_calc)
# Append the new rows to your tibble
# If not sure how bind_rows works, use ?bind_rows
estimates <- bind_rows(estimates, this_estimate)
}
estimates |>
ggplot(aes(x = n, y = sample_mean)) +
geom_line()
set.seed(60637)
sample_sizes <- seq(100, 1000, by = 100)
population_sd <- c(1, 5, 10, 20)
estimates <- tibble(n = integer(), pop_sd = double(), sample_mean = double(), )
for (x in population_sd){
# For each population standard deviation in the outer loop
# We run the code with each sample size in the inner loop!
for (y in sample_sizes) {
estimates$n <- y
estimates$pop_sd <- sd(rnorm(n = y, mean = 0, sd = x))
estimates$sample_mean <- mean(rnorm(n = y, mean = 0, sd = x))
}
}
estimates
set.seed(60637)
sample_sizes <- seq(100, 1000, by = 100)
population_sd <- c(1, 5, 10, 20)
estimates <- tibble(n = integer(), pop_sd = double(), sample_mean = double(), )
for (x in population_sd){
# For each population standard deviation in the outer loop
# We run the code with each sample size in the inner loop!
for (y in sample_sizes) {
this_estimate <- tibble(n = y, pop_sd = x, sample_mean = mean(rnorm(n = y, mean = 0, sd = x)))
estimates <- bind_rows(estimates, this_estimate)
}
}
estimates
estimates %>%
ggplot(aes(x = n, y = sample_mean)) +
geom_line() +
facet_wrap(vars(population_sd)) +
theme_minimal()
estimates %>%
ggplot(aes(x = n, y = sample_mean)) +
geom_line() +
facet_wrap(vars(pop_sd)) +
theme_minimal()
sample_sizes <- 1:50
estimates <- vector("list", 3)
estimates
sample_sizes <- 1:50
estimates <- vector("list", length(sample_sizes))
set.seed(60637)
for (x in seq_along(sample_sizes)) {
estimates[[x]] <- c(sample_sizes[[x]], mean(rnorm(n = sample_sizes[[x]], mean = 0, sd = 5)))
}
estimates
bind_rows(estimates)
bind_rows(estimates,)
tibble(estimates)
estimates
source("D:/1. Documentos/0. Bases de datos/00. GitHub/CNH_rep/Personal/shinyLCDS.R", echo=TRUE)
runApp('D:/1. Documentos/0. Bases de datos/00. GitHub/CNH_rep/Personal/shinyLCDS.R')
runApp('D:/1. Documentos/0. Bases de datos/00. GitHub/CNH_rep/Personal/shinyLCDS.R')
runApp('D:/1. Documentos/0. Bases de datos/00. GitHub/CNH_rep/Personal/shinyLCDS.R')
rsconnect::deployApp
rsconnect::deployApp()
rsconnect::deployApp(appDir = "shinyLCDS.R", dependencies = TRUE)
rsconnect::deployApp(appDir = "shinyLCDS.R)
rsconnect::deployApp(appDir = "shinyLCDS.R")
rsconnect::deployApp(appDir = dir)
install.packages("shiny")
install.packages("shiny")
library(rsconnect)
deployApp("shinyLCDS.R")
deployApp(dir)
runApp(shinyLCDS.R)
library(shiny)
runApp(shinyLCDS.R)
library(shiny)
runApp('C:/Users/canun/OneDrive - Universidad del Pacífico/2. La Casa de Sammy/1. Finanzas/2. Ventas/2024/0. SUSII - Reporte de ventas/shinyLCDS.R')
library(shiny)
runApp('D:/1. Documentos/0. Bases de datos/00. GitHub/CNH_rep/Personal/shinyLCDS.R')
runApp('D:/1. Documentos/0. Bases de datos/00. GitHub/CNH_rep/Personal/shinyLCDS.R')
install.packages("rsconnect")
install.packages("rsconnect")
rsconnect::appDependencies()
library(rsconnect)
rsconnect::deployApp(appDir = 'D:/1. Documentos/0. Bases de datos/00. GitHub/CNH_rep/Personal')
shiny::runApp('D:/1. Documentos/0. Bases de datos/00. GitHub/CNH_rep/Personal')
dir <- 'D:/1. Documentos/0. Bases de datos/00. GitHub/CNH_rep/Personal'
setwd(dir)
df <- read.xlsx('ReporteVentas.xlsx', startRow = 9)
names(df) <- c("idVenta", "nDocumento", "fecha", "nombreCliente" , "dirCliente", "idCliente", "emailCliente",
"moneda", "tipoCambio", "igv", "montoTotal", "descTotal", "estado", "vendedor" , "observaciones",
"notas", "ordenCompra", "codItem", "descripcion", "catItem", "tipoImpuesto", "valorUnitarioItem", "precioUnitarioItem",
"cantItem", "descItem", "totalItem", "aliasItem")
df <- df %>%
subset(select = -c(emailCliente, dirCliente, moneda, tipoCambio, vendedor,observaciones,notas,ordenCompra, aliasItem)) %>%
filter(estado != "Anulado")
replace_special_chars <- function(text) {
text <- gsub("&#243;", "ó", text)
text <- gsub("&#241;", "ñ", text)
text <- gsub("&#193;", "Á", text)
text <- gsub("&#205;", "Í", text)
text <- gsub("&#209;", "Ñ", text)
text <- gsub("&#250;", "ú", text)
text <- gsub("&#233;", "é", text)
text <- gsub("&#237;", "í", text)
return(text)
}
# Aplicar la función a todas las columnas del data frame usando un bucle
for (col in names(df)) {
df[[col]] <- replace_special_chars(df[[col]])
}
df <- df %>%
mutate(montoTotal = as.numeric(montoTotal),
descTotal = as.numeric(descTotal),
valorUnitarioItem = as.numeric(valorUnitarioItem),
precioUnitarioItem = as.numeric(precioUnitarioItem),
descItem = as.numeric(descItem),
totalItem = as.numeric(totalItem),
cantItem = as.numeric(cantItem))
df3 <- df %>%
filter(str_detect(descripcion, "y corte|//+ cort|//+ reto|//y retoque|//y recort"))
df3 <- df3 %>%
mutate(precioUnitarioItem = case_when(str_detect(descripcion, "cort") ~ precioUnitarioItem - 25,
str_detect(descripcion, "retoque") | str_detect(descripcion, "recort") ~ precioUnitarioItem - 15,
TRUE ~ precioUnitarioItem),
totalItem = case_when(str_detect(descripcion, "cort") ~ totalItem - 25*cantItem,
str_detect(descripcion, "retoque") | str_detect(descripcion, "recort") ~ totalItem - 15*cantItem,
TRUE ~ totalItem),
valorUnitarioItem = case_when(str_detect(descripcion, "cort") ~ valorUnitarioItem - 25*cantItem/1.18,
str_detect(descripcion, "retoque") | str_detect(descripcion, "recort") ~ valorUnitarioItem - 15*cantItem/1.18,
TRUE ~ valorUnitarioItem)) %>%
mutate(descripcion = case_when(str_detect(descripcion, "Baño premiu") ~ "Baño premium",
str_detect(descripcion, "Baño diaman") ~ "Baño diamante",
str_detect(descripcion, "Baño med") ~ "Baño medicado",
str_detect(descripcion, "Baño y") ~ "Baño premium")) %>%
rbind(df3) %>%
mutate(descripcion = case_when(str_detect(descripcion, "cort") ~ "Corte",
str_detect(descripcion, "retoque") | str_detect(descripcion, "recort") ~ "Retoque",
TRUE ~ descripcion),
precioUnitarioItem = case_when(descripcion == "Corte" ~ 25,
descripcion == "Retoque" ~ 15,
TRUE ~ precioUnitarioItem),
totalItem = case_when(descripcion == "Corte" ~ 25*cantItem,
descripcion == "Retoque" ~ 15*cantItem,
TRUE ~ totalItem),
valorUnitarioItem = case_when(descripcion == "Corte" ~ 25*cantItem/1.18,
descripcion == "Retoque" ~ 15*cantItem/1.18,
TRUE ~ valorUnitarioItem))
df <- df %>%
filter(!str_detect(descripcion, "y corte|//+ cort|//+ reto|//y retoque|//y recort")) %>%
rbind(df3)
df <- df %>%
mutate(descripcion = case_when(descripcion == "Limpieza dental" ~ "Lavado de dientes",
descripcion == "Baño" ~ "Baño premium",
descripcion == "Stripping" | descripcion == "stripping" | descripcion == "Carding" ~ "Deslanado",
TRUE ~ descripcion),
codItem = case_when(str_detect(descripcion, "elivery") | str_detect(descripcion, "traslado") ~ "DELIVERY",
str_detect(descripcion, "premiu") & str_detect(descripcion, "año") ~ "SPA-001",
str_detect(descripcion, "diamante") & str_detect(descripcion, "año") ~ "SPA-002",
str_detect(descripcion, "medicado") & str_detect(descripcion, "año") ~ "SPA-003",
str_detect(descripcion, "orte") & str_detect(descripcion, "uña") ~ "SPA-008",
str_detect(descripcion, "etoque")  ~ "SPA-006",
str_detect(descripcion, "desmotado") | str_detect(descripcion, "Desmotado") ~ "SPA-010",
str_detect(descripcion, "deslanado") | str_detect(descripcion, "Deslanado") ~ "SPA-009",
descripcion == "Corte" ~ "SPA-005",
str_detect(descripcion, "higiénico") & str_detect(descripcion, "orte") ~ "SPA-004",
str_detect(descripcion, "Depilación de oídos") ~ "SPA-011",
descripcion == "Lavado de dientes" | descripcion == "Cepillado de dientes" ~ "SPA-007",
TRUE ~ codItem)) %>%
mutate(catItem = case_when(str_detect(codItem, "DELIVERY") ~ "Delivery",
str_detect(codItem, "SPA") ~ "Pet Spa",
str_detect(descripcion, "parasit") ~ "Medicamentos",
str_detect(descripcion, "Canbo Dog") ~ "Alimentos - Seco",
str_detect(descripcion, "Pet Care") ~ "Alimentos - Snacks",
str_detect(descripcion, "Canbo Cat") ~ "Gatos - Alimentos",
str_detect(descripcion, "Canbo Cat") ~ "Gatos - Alimentos",
str_detect(descripcion, "Polo") ~ "Ropa - Verano",
str_detect(descripcion, "Ropa de perro - C. Salmon") ~ "Ropa - Invierno",
str_detect(descripcion, "elota") ~ "Peluches Y Juguetes juguetes de goma",
str_detect(descripcion, "mordedor") ~ "Peluches Y Juguetes interactivos y cognitivos",
str_detect(descripcion, "ujetador") ~ "Accesorios - Collares",
TRUE ~ catItem))
rm(df3)
## ARREGLAR LO DEL DESCUENTO TOTAL
df2 <- df %>%
filter(descTotal >0) %>%
arrange(idVenta, nDocumento, fecha) %>%
mutate(descItem = case_when(str_detect(descripcion,"Baño") & (descTotal <= 5 & descTotal > 1) ~ descTotal,
descTotal == 25 & str_detect(descripcion,"Corte") ~ descTotal,
descTotal == 45 & (str_detect(descripcion,"Desmotado") | str_detect(descripcion,"Depilación de oídos")) ~ precioUnitarioItem,
descTotal == 30 | descTotal == 20 ~ descTotal,
descTotal == 24 & str_detect(descripcion,"Baño") ~ descTotal/3,
(descTotal >=6 & descTotal <= 13) & str_detect(descripcion,"Baño") ~ descTotal/2,
descTotal == 15 & str_detect(descripcion,"Delivery") ~ descTotal,
descTotal == 0.9 ~ descTotal,
TRUE ~ descItem),
descTotal = case_when((descTotal <= 5 & descTotal > 1) ~ 0,
descTotal == 25 ~ 0,
descTotal == 45 ~ 0,
descTotal == 30 | descTotal == 20 ~ 0,
descTotal == 24 ~ 0,
(descTotal >=6 & descTotal <= 13) ~ 0,
descTotal == 15 ~ 0,
descTotal == 0.9 ~ 0,
TRUE ~ descTotal)) %>%
mutate(descItem = case_when(descTotal != 0 & descItem != 0 & descItem > 8 ~ descItem + descTotal,
TRUE ~ descItem),
descTotal = case_when(descTotal != 0 & descItem != 0 & descItem > 8 ~ 0,
TRUE ~ descTotal)) %>%
mutate(totalItem = round(cantItem*precioUnitarioItem - cantItem*descItem, 2))
df <- df %>%
filter(descTotal == 0) %>%
rbind(df2)
rm(df2)
#2.  Tablas y gráficos ----
df <- df %>%
mutate(fecha = dmy_hm(fecha),
anio = year(fecha),
mes = month(fecha),
dia = day(fecha)) %>%
mutate(lineaNegocio = case_when(catItem == "Pet Spa" | catItem =="Delivery" ~ "Pet spa",
TRUE ~ "Pet shop"))
tabla1 <- df %>%
group_by(lineaNegocio, anio, mes,dia) %>%
summarise(montoDiario=sum(as.numeric(totalItem)))
# Tabla mensual que divide las ventas por linea de negocio
tabla2 <- tabla1 %>%
group_by(lineaNegocio,anio,mes) %>%
summarise(montoMensual=sum(as.numeric(montoDiario)))
# Tabla de ventas anuales por producto
tabla3 <- df %>%
group_by(codItem,descripcion,catItem,anio) %>%
summarise(montoMensual=sum(as.numeric(totalItem)),
cantMensual = n()) %>%
ungroup()
# Tabla de ventas anuales por categoría
tabla4 <- df %>%
group_by(catItem,anio) %>%
summarise(montoMensual=sum(as.numeric(totalItem)),
cantMensual = n()) %>%
ungroup()
# Gráfico de ticket promedio
View(tabla1)
View(tabla2)
View(tabla3)
View(tabla4)
View(tabla3)
View(df)
